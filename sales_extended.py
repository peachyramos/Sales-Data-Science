# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qZ2fKggXbv4ytATl9k47EM8cuyxS3ooa
"""

import pandas as pd

from google.colab import files
data_to_load = files.upload()

import csv

with open('sales_extended.csv', newline='') as f:
  reader = csv.reader(f)
  o_monthly_sales = []  # create list
  o_monthly_expenditure = []  # create list
  months = []  # create list
  for row in reader:
        months.append(row[1])  # append to the list as a string value : GOOD
        o_monthly_sales.append(row[2])  # append to the list as a string value : NOT GOOD
        o_monthly_expenditure.append(row[3])  # append to the list as a string value : NOT GOOD

del months[0]  # Delete 'Month'
del o_monthly_sales[0]  # Delete 'sales'
del o_monthly_expenditure[0]  # Delete 'expenditure'

# convert str in int in the list
monthly_sales = []  # create a new list
for i in o_monthly_sales:  # go over each item of our list
    i = monthly_sales.append(int(i))  # convert in integers

monthly_expenditure = []
for i in o_monthly_expenditure:
    i = monthly_expenditure.append(int(i))

print(monthly_sales)  # just checking

avgsales = sum(monthly_sales) / len(monthly_sales)

print(avgsales)
print(max(monthly_sales))
print(min(monthly_sales))

sale_that_month = int(input("Please enter the monthly sales: "))
exp_that_month = int(input("please enter the monthly expenditure: "))
if (sale_that_month > exp_that_month):
    profit = sale_that_month - exp_that_month
    print("Total profit amount is = {0}".format(profit))
elif (exp_that_month > sale_that_month):
    loss = sale_that_month - exp_that_month
    print("Total loss amount is = {0}".format(loss))
else:
    print("Break Even!!!")

import matplotlib.pyplot as plt

plt.plot(months, monthly_sales,
         'ro')  # months are x-coordinates, sales are y-coordinates and the 'ro' part is selecting a style -> red balls
plt.xlabel('month')  # add labels
plt.ylabel('sales (gbb)')  # add labels
plt.show()

import pandas

df = pandas.read_csv('sales_extended.csv')
df

"""# New section"""

data_year = df[df['year'] == 2017] #  to select data per year
data_year[:12]

data_month = df[df['month'] == "jan"]  #  to select data per month
data_month[:3]

total_sales_per_year=df.groupby('year')['sales'].sum()  # total sales per year
year_list= ['2016','2017','2018']


plt.bar(year_list,total_sales_per_year)
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.title('Total Sales per Year')
plt.show()

total_sales_per_month= df.groupby('month', sort=False)['sales'].sum()  # total sales per month, in the past three years.

plt.plot(total_sales_per_month, 'go')
plt.xlabel('Month')
plt.ylabel('Sales')
plt.title('Total Sales per Month')
plt.show()

#could do the average of each month instead of the sum - we have below, the average of each month

average_sales_per_year=df.groupby('year')['sales'].mean()  # average sales per year
plt.bar(['2016','2017','2018'], average_sales_per_year)
plt.xlabel('Year')
plt.ylabel('Ave Sales')
plt.title('Average Sales per Year')
plt.show()

average_sales_per_month = df.groupby('month', sort=False)['sales'].mean()  # average sales per month
plt.plot(average_sales_per_month, 'bs')
plt.xlabel('Year')
plt.ylabel('Ave Sales')
plt.title('Average Sales per Month')
plt.show()

#could print out which month in average has the bigges sales - we can add this, but let's not remove the average sales per month

highest_sales_per_year=df.groupby('year')['sales'].max()  # Highest Sales per Year
plt.subplot(1,2,1)
plt.bar(['2016','2017','2018'], highest_sales_per_year, color='green')
plt.xlabel('Year')
plt.ylabel('Max Sales')
plt.title('Highest Sales per Year')

lowest_sales_per_year = df.groupby('year')['sales'].min()  # lowest sales per year
plt.subplot(1,2,2)
plt.bar(['2016','2017','2018'], lowest_sales_per_year, color='red')
plt.xlabel('Month')
plt.ylabel('Min Sales')
plt.title('Lowest Sales per Year')

plt.tight_layout()

plt.show() #

highest_sales_per_month= df.groupby('month', sort=False)['sales'].max()  # Highest Sales per Month, in the past three years
lowest_sales_per_month= df.groupby('month', sort=False)['sales'].min()  # Lowest Sales per month, in the past three years

fig = plt.figure()
ax1 = fig.add_subplot(111)

ax1.plot(highest_sales_per_month, 'bo', label='highest')
ax1.plot(lowest_sales_per_month,'g^', label='lowest')
plt.xlabel('Year')
plt.ylabel('Sales')
plt.title('Highest and Lowest Sales per Month')
plt.legend(loc='upper left')
plt.show()

df['Profit/Loss'] = df["sales"] - df["expenditure"]  # Profit/Loss=Sales - Expenditure(for presentation purpose)
df

variance_per_month= df.groupby('month',sort=False)['Profit/Loss'].var()  # Variance per month
plt.plot(variance_per_month, 'go')
plt.xlabel('month')
plt.ylabel('variance')
plt.title('Variance per month')
plt.show()

#The variance seems really big 1e7 ... not sure this is rigth - J , Haha. Yes, this is really big.Let it be just like that-P

total_profit_per_year = df.groupby('year')['Profit/Loss'].sum()  # Total Profit per year=Total sales(per year)- Total Expenditure(per year)
plt.bar(['2016','2017','2018'], total_profit_per_year, color='red')
plt.xlabel('year')
plt.ylabel('Profit')
plt.title('Total Profit per Year')
plt.show()

highest_profit_per_year = df.groupby('year')['Profit/Loss'].max()  # Higest Profit per Year
plt.bar(year_list, highest_profit_per_year, color='yellow', label='profit')

highest_lost_per_year= df.groupby('year')['Profit/Loss'].min()  # Higest Loss per Year
plt.bar(year_list, highest_lost_per_year, color='red', label='loss')
plt.xlabel('Year')
plt.ylabel('Loss/profit')
plt.title('Highest Loss and highest profit per Year')
plt.legend(loc='upper left')

plt.show()

highest_profit_in_a_month = df.groupby('month', sort=False)['Profit/Loss'].max()  # Highest Profit in a Month in a span of three years (- : Loss)
lowest_profit_in_a_month = df.groupby('month', sort=False)['Profit/Loss'].min()  # Highest Loss in a Month in a span of three years (+ : Profit)

fig = plt.figure()
ax1 = fig.add_subplot(111)


ax1.plot(highest_profit_in_a_month, 'go', label='highest')
ax1.plot(lowest_profit_in_a_month,'r^', label='lowest')
plt.xlabel('Month')
plt.ylabel('Profit/Loss')
plt.title('Highest Loss and Profit per in a Month')
plt.legend(loc='upper left')
plt.show()



